<?php
/**
 * @package ThymeCore3
 * A simple base action controller class
 */
class SimpleController
{
/**
* @var str $cmd Command detected from request which then determines the Action to Run.
*/	
	public $cmd;
	
	/**
	 * ID of the record currently being viewed (if on the view page)
	 * @var int
	 */
	public $id = null;
	
	/**
	 * Pagination object for results page
	 * @var pagination
	 */
	public $pagination = null;
	
	public $resultsperpage = 10;

	/**
	 * Directory containing template files for this class's actions
	 * @var string
	 */
	public $viewDir = 'views/';



/**
 * Array of paths to files to use for various view templates.
 * Be default it should try to load from the nearest /templates/ folder.
 * You can override that without changing the code by having your own /templates/ folder in the root
 * of the site you're working on with files named the same as the defaults.
 * This auto-override behaviour is probably based on the order in which the include_path is defined. ( .(current folder) being listed first )
 * @var array
 */
public $templates = array('start'=>'_templates/tpl.index.php',
'view'=>'_templates/tpl.view.php',
'searchresults'=>'_templates/tpl.results.php');


/**
* @var $model Will contain a model object if needed
*/
	public $model;
	
/**
* @var str $output HTML output from methods destined to be viewed. Any method that generates a visible "page" must populate this var instead of just echoing its template.
*/
	public  $output='';


/**
 * Child Classes would use this to create their model object and process the request
 */
	function __construct()
	{}


	/**
	* Figures out $cmd var from GET and POST. Sets $cmd to 'start' if none found.
	* Must be run (or cmd set some other way) before calling ::run()
	*/
	function processRequest( $params=null )
	{
		if( !$params ){ $params = $_REQUEST; }
		// get current action from URL or form
		$this->cmd = ( isset($params['cmd']) ) ? $params['cmd'] : 'start';
		$this->id = ( isset($params['id']) ) ? (int)$params['id'] : null;
	}

/**
 * Takes the determined $cmd, adds _Action to it and then calls that as a method.
 * @return str $this->output The output generated by the method that was called.
 */
	function run()
	{	
		$action = $this->cmd.'_Action';
		$this->$action();
		return $this->output;
	}
}
?>